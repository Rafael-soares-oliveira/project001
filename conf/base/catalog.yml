<<<<<<< HEAD
# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html

companies:
  type: pandas.CSVDataset
  filepath: data/01_raw/companies.csv

reviews:
  type: pandas.CSVDataset
  filepath: data/01_raw/reviews.csv

shuttles:
  type: pandas.ExcelDataset
  filepath: data/01_raw/shuttles.xlsx
  load_args:
    engine: openpyxl

preprocessed_companies:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/preprocessed_companies.parquet

preprocessed_shuttles:
  type: pandas.ParquetDataset
  filepath: data/02_intermediate/preprocessed_shuttles.parquet

model_input_table:
  type: pandas.ParquetDataset
  filepath: data/03_primary/model_input_table.parquet

regressor:
  type: pickle.PickleDataset
  filepath: data/06_models/regressor.pickle
  versioned: true

shuttle_passenger_capacity_plot_exp:
  type: plotly.PlotlyDataset
  filepath: data/08_reporting/shuttle_passenger_capacity_plot_exp.json
  versioned: true
  plotly_args:
    type: bar
    fig:
      x: shuttle_type
      y: passenger_capacity
      orientation: h
    layout:
      xaxis_title: Shuttles
      yaxis_title: Average passenger capacity
      title: Shuttle Passenger capacity

shuttle_passenger_capacity_plot_go:
  type: plotly.JSONDataset
  filepath: data/08_reporting/shuttle_passenger_capacity_plot_go.json
  versioned: true

dummy_confusion_matrix:
  type: matplotlib.MatplotlibWriter
  filepath: data/08_reporting/dummy_confusion_matrix.png
  versioned: true
=======
01_raw_ticker:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/01_raw/ticker

01_raw_news:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/01_raw/news

02_intermediate_ticker:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/02_intermediate/ticker

02_intermediate_news:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/02_intermediate/news

03_primary_ticker:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/03_primary/ticker

03_primary_news:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/03_primary/news

04_feature:
  type: kedro_datasets.partitions.PartitionedDataSet
  dataset:
    type: pandas.ParquetDataSet
    save_args:
      index: False
  path: data/04_feature
>>>>>>> af6bad4 (create pipelines, still have to create functions)
